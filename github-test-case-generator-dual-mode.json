{
  "name": "GitHub Test Case Generator - Dual Mode (Batch & Individual)",
  "nodes": [
    {
      "parameters": {},
      "id": "0459a837-ae96-4a27-a67b-33aaa7dd5b25",
      "name": "When clicking 'Test workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-1904, -16]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1",
              "name": "owner",
              "value": "wizeline",
              "type": "string"
            },
            {
              "id": "2",
              "name": "repo",
              "value": "BytescribeTeam",
              "type": "string"
            },
            {
              "id": "3",
              "name": "branch",
              "value": "main",
              "type": "string"
            },
            {
              "id": "4",
              "name": "processingMode",
              "value": "individual",
              "type": "string"
            },
            {
              "id": "5",
              "name": "batchSize",
              "value": 10,
              "type": "number"
            },
            {
              "id": "6",
              "name": "fetchFileContent",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "7",
              "name": "maxFilesToProcess",
              "value": 50,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "8c182798-5287-43ac-94b8-0def6b83e29d",
      "name": "Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1680, -16],
      "notes": "Set processingMode to:\n- 'batch' for faster batch processing\n- 'individual' for detailed file-by-file analysis\n\nSet fetchFileContent to true to get actual code content\nAdjust maxFilesToProcess and batchSize as needed"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/branches/{{ $json.branch }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "id": "94e008e5-7408-4f2a-b378-40b33946bd61",
      "name": "Get Branch Info",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1456, -16],
      "credentials": {
        "githubApi": {
          "id": "8iyQGt8qXBNNlcup",
          "name": "GitHub account 4"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $('Configuration').item.json.owner }}/{{ $('Configuration').item.json.repo }}/git/trees/{{ $json.commit.sha }}?recursive=1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "id": "d505c676-14bf-4739-ac2e-0d81a395367d",
      "name": "Get Repository Tree",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1232, -16],
      "credentials": {
        "githubApi": {
          "id": "74FBfZyE3yFXYmu7",
          "name": "GitHub account 5"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract file tree from GitHub API response\nconst treeData = $input.first().json.tree;\nconst config = $('Configuration').first().json;\nconst owner = config.owner;\nconst repo = config.repo;\nconst branch = config.branch;\nconst maxFiles = config.maxFilesToProcess || 100;\n\n// Define testable file extensions by language/framework\nconst testableExtensions = {\n  javascript: ['.js', '.jsx', '.mjs', '.cjs'],\n  typescript: ['.ts', '.tsx'],\n  python: ['.py'],\n  java: ['.java', '.kt', '.kts'],\n  csharp: ['.cs'],\n  go: ['.go'],\n  ruby: ['.rb'],\n  php: ['.php'],\n  rust: ['.rs'],\n  swift: ['.swift'],\n  cpp: ['.c', '.cpp', '.cc', '.cxx', '.h', '.hpp'],\n  scala: ['.scala'],\n  vue: ['.vue'],\n  svelte: ['.svelte']\n};\n\nconst allTestableExtensions = Object.values(testableExtensions).flat();\n\nconst excludePaths = [\n  'test', 'tests', '__tests__', 'spec', 'specs',\n  'node_modules', 'vendor', 'dist', 'build', 'out',\n  '.git', '.github', '.vscode', '.idea',\n  'coverage', 'docs', 'documentation',\n  'examples', 'demo', 'samples'\n];\n\nconst excludeFilenames = [\n  'jest.config', 'webpack.config', 'babel.config',\n  'tsconfig', 'eslint', 'prettier',\n  '.test.', '.spec.', '_test.', '_spec.',\n  'test.', 'spec.', 'mock', 'fixture'\n];\n\nconst sourceFiles = treeData\n  .filter(item => {\n    if (item.type !== 'blob') return false;\n    \n    const path = item.path.toLowerCase();\n    const filename = path.split('/').pop();\n    \n    const hasTestableExt = allTestableExtensions.some(ext => \n      item.path.endsWith(ext)\n    );\n    if (!hasTestableExt) return false;\n    \n    const isInExcludedPath = excludePaths.some(excluded => \n      path.includes('/' + excluded.toLowerCase() + '/') || \n      path.startsWith(excluded.toLowerCase() + '/')\n    );\n    if (isInExcludedPath) return false;\n    \n    const hasExcludedPattern = excludeFilenames.some(pattern => \n      filename.includes(pattern.toLowerCase())\n    );\n    if (hasExcludedPattern) return false;\n    \n    if (item.size && item.size > 500000) return false;\n    \n    return true;\n  })\n  .slice(0, maxFiles)  // Limit based on config\n  .map(file => {\n    let language = 'unknown';\n    for (const [lang, exts] of Object.entries(testableExtensions)) {\n      if (exts.some(ext => file.path.endsWith(ext))) {\n        language = lang;\n        break;\n      }\n    }\n    \n    return {\n      path: file.path,\n      sha: file.sha,\n      size: file.size,\n      url: file.url,\n      language: language,\n      owner: owner,\n      repo: repo,\n      branch: branch\n    };\n  });\n\nconst filesByLanguage = sourceFiles.reduce((acc, file) => {\n  if (!acc[file.language]) {\n    acc[file.language] = [];\n  }\n  acc[file.language].push(file);\n  return acc;\n}, {});\n\nconst languageStats = Object.entries(filesByLanguage).map(([lang, files]) => ({\n  language: lang,\n  count: files.length,\n  totalSize: files.reduce((sum, f) => sum + (f.size || 0), 0)\n}));\n\nreturn [{\n  json: {\n    owner,\n    repo,\n    branch,\n    processingMode: config.processingMode,\n    fetchFileContent: config.fetchFileContent,\n    batchSize: config.batchSize,\n    totalFiles: treeData.length,\n    sourceFilesCount: sourceFiles.length,\n    sourceFiles: sourceFiles,\n    filesByLanguage: filesByLanguage,\n    languageStats: languageStats,\n    repositoryUrl: `https://github.com/${owner}/${repo}`\n  }\n}];"
      },
      "id": "36b88478-39a4-4603-b350-2f89d7c7e479",
      "name": "Process File Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1008, -16]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "mode-check",
              "leftValue": "={{ $json.processingMode }}",
              "rightValue": "individual",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fa27a571-50c2-40d0-860e-8c242e7051ac",
      "name": "Route by Processing Mode",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-784, -16]
    },
    {
      "parameters": {
        "fieldToSplitOut": "sourceFiles",
        "options": {}
      },
      "id": "cd2eea94-2cb7-46a4-b3cb-d4838b2c6373",
      "name": "Split Into Individual Files",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [-560, -128]
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/contents/{{ $json.path }}?ref={{ $json.branch }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "id": "7a430b71-1ffc-4858-a980-570bf72237ea",
      "name": "Fetch File Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-336, -128],
      "credentials": {
        "githubApi": {
          "id": "74FBfZyE3yFXYmu7",
          "name": "GitHub account 5"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Decode base64 content and prepare for AI\nconst item = $input.first().json;\nconst fileInfo = $input.first().json;\n\nlet fileContent = '';\nif (item.content && item.encoding === 'base64') {\n  fileContent = Buffer.from(item.content, 'base64').toString('utf-8');\n}\n\nreturn [{\n  json: {\n    filePath: item.path,\n    fileName: item.name,\n    language: fileInfo.language,\n    size: item.size,\n    content: fileContent,\n    sha: item.sha,\n    owner: fileInfo.owner,\n    repo: fileInfo.repo\n  }\n}];"
      },
      "id": "3ce4bb43-f917-4de7-aeb1-acb4ea8ac344",
      "name": "Prepare Individual File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-112, -128]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "individual-prompt",
              "name": "prompt",
              "value": "=File: {{ $json.filePath }}\nLanguage: {{ $json.language }}\nSize: {{ $json.size }} bytes\n\nFile Content:\n```\n{{ $json.content }}\n```\n\nTask: Analyze this specific file and generate comprehensive test cases.\n\nProvide:\n1. Test file name/path (following {{ $json.language }} conventions)\n2. Detailed unit test scenarios based on the actual code\n3. Edge cases specific to this implementation\n4. Required mocks/dependencies\n5. Testing framework recommendation\n6. Suggested test structure\n\nIMPORTANT: Return ONLY valid JSON, no markdown or explanations.\n\nFormat:\n{\n  \"sourceFile\": \"{{ $json.filePath }}\",\n  \"language\": \"{{ $json.language }}\",\n  \"testFile\": \"path/to/test/file\",\n  \"framework\": \"recommended-framework\",\n  \"testScenarios\": [\n    {\n      \"description\": \"Test description\",\n      \"type\": \"unit|integration|edge-case\",\n      \"priority\": \"high|medium|low\",\n      \"testCode\": \"Sample test code structure\"\n    }\n  ],\n  \"mocks\": [\"dependency1\"],\n  \"setup\": \"Setup instructions\",\n  \"notes\": \"Additional notes\"\n}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "111898d9-4270-490a-b87c-089e4ca21c66",
      "name": "Prepare Individual File Prompt",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [112, -128]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {}
      },
      "id": "2c337cc5-1573-4740-a2fa-db5e1e39a174",
      "name": "AI - Individual File Analysis",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [336, -128]
    },
    {
      "parameters": {
        "mode": "append",
        "options": {}
      },
      "id": "91ba66f1-97f1-4646-b04a-cab3e34bd584",
      "name": "Merge All Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [560, -16]
    },
    {
      "parameters": {
        "jsCode": "// Prepare batch processing\nconst data = $input.first().json;\nconst batchSize = data.batchSize || 10;\nconst sourceFiles = data.sourceFiles;\n\n// Create batches\nconst batches = [];\nfor (let i = 0; i < sourceFiles.length; i += batchSize) {\n  batches.push({\n    batchNumber: Math.floor(i / batchSize) + 1,\n    files: sourceFiles.slice(i, i + batchSize),\n    owner: data.owner,\n    repo: data.repo,\n    branch: data.branch,\n    totalBatches: Math.ceil(sourceFiles.length / batchSize)\n  });\n}\n\nreturn batches.map(batch => ({ json: batch }));"
      },
      "id": "89dd5bb0-e3f3-4729-b943-b8c48d4b0700",
      "name": "Create Batches",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-560, 96]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "batch-prompt",
              "name": "batchPrompt",
              "value": "=Batch {{ $json.batchNumber }}/{{ $json.totalBatches }}\nRepository: {{ $json.owner }}/{{ $json.repo }}\n\nFiles in this batch:\n{{ $json.files.map(f => `- ${f.path} [${f.language}]`).join('\\n') }}\n\nTask: Generate test case recommendations for these {{ $json.files.length }} files.\n\nFor each file, provide:\n1. Test file path\n2. Key test scenarios\n3. Testing framework\n4. Priority level\n\nIMPORTANT: Return ONLY a valid JSON array.\n\nFormat:\n[\n  {\n    \"sourceFile\": \"path/to/file\",\n    \"language\": \"language\",\n    \"testFile\": \"path/to/test\",\n    \"framework\": \"framework-name\",\n    \"testScenarios\": [\n      {\n        \"description\": \"Test description\",\n        \"type\": \"unit\",\n        \"priority\": \"high\"\n      }\n    ],\n    \"mocks\": [],\n    \"notes\": \"\"\n  }\n]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "22dbc25e-a85c-44c5-bb72-1eb3bde91b00",
      "name": "Prepare Batch Prompt",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-336, 96]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.batchPrompt }}",
        "options": {}
      },
      "id": "c7220434-76fe-497c-836c-860857f421d3",
      "name": "AI - Batch Analysis",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [-112, 96]
    },
    {
      "parameters": {
        "jsCode": "// Parse and aggregate batch results\nconst items = $input.all();\nconst repoInfo = $('Process File Structure').first().json;\n\nlet allTestCases = [];\n\nitems.forEach(item => {\n  const output = item.json.output;\n  \n  let testCases;\n  try {\n    testCases = typeof output === 'string' ? JSON.parse(output) : output;\n  } catch (e) {\n    const jsonMatch = output.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n    if (jsonMatch) {\n      testCases = JSON.parse(jsonMatch[0]);\n    } else {\n      testCases = [];\n    }\n  }\n  \n  if (!Array.isArray(testCases)) {\n    testCases = [testCases];\n  }\n  \n  allTestCases = allTestCases.concat(testCases);\n});\n\nconst formattedOutput = {\n  repository: {\n    owner: repoInfo.owner,\n    repo: repoInfo.repo,\n    branch: repoInfo.branch,\n    url: repoInfo.repositoryUrl\n  },\n  processingMode: repoInfo.processingMode,\n  summary: {\n    totalSourceFiles: repoInfo.sourceFilesCount,\n    filesAnalyzed: allTestCases.length,\n    generatedAt: new Date().toISOString(),\n    batchesProcessed: items.length\n  },\n  testCases: allTestCases.map((tc, index) => ({\n    id: index + 1,\n    sourceFile: tc.sourceFile,\n    testFile: tc.testFile,\n    framework: tc.framework || 'jest',\n    language: tc.language,\n    scenarios: tc.testScenarios || tc.scenarios || [],\n    mocks: tc.mocks || [],\n    notes: tc.notes || '',\n    priority: tc.priority || 'medium',\n    setup: tc.setup || '',\n    testCode: tc.testCode || ''\n  }))\n};\n\nreturn [{ json: formattedOutput }];"
      },
      "id": "51609c08-284d-4caa-bd89-8e4c0858dbe2",
      "name": "Format Final Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [784, -16]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "=github-test-cases-{{ $json.repository.repo }}-{{ $json.processingMode }}-{{ $now.format('yyyy-MM-dd-HHmmss') }}.json"
        }
      },
      "id": "b5426a06-fd53-4abf-8ad5-60d26fcde369",
      "name": "Export to JSON File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [1008, -16]
    },
    {
      "parameters": {
        "model": "anthropic.claude-3-5-sonnet-20241022-v2:0",
        "options": {
          "temperature": 0.3
        }
      },
      "id": "3a3582f0-bbf7-482d-88bc-dd6f46a575af",
      "name": "AWS Bedrock - Individual",
      "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
      "typeVersion": 1,
      "position": [336, 128],
      "credentials": {
        "aws": {
          "id": "bYwD2zosP6YYHz0J",
          "name": "AWS account 4"
        }
      }
    },
    {
      "parameters": {
        "model": "anthropic.claude-3-5-sonnet-20241022-v2:0",
        "options": {
          "temperature": 0.3
        }
      },
      "id": "ae37cee3-985b-4b77-bcb2-fb453030671a",
      "name": "AWS Bedrock - Batch",
      "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
      "typeVersion": 1,
      "position": [-112, 304],
      "credentials": {
        "aws": {
          "id": "bYwD2zosP6YYHz0J",
          "name": "AWS account 4"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking 'Test workflow'": {
      "main": [
        [
          {
            "node": "Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configuration": {
      "main": [
        [
          {
            "node": "Get Branch Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Branch Info": {
      "main": [
        [
          {
            "node": "Get Repository Tree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Repository Tree": {
      "main": [
        [
          {
            "node": "Process File Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process File Structure": {
      "main": [
        [
          {
            "node": "Route by Processing Mode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Processing Mode": {
      "main": [
        [
          {
            "node": "Split Into Individual Files",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Individual Files": {
      "main": [
        [
          {
            "node": "Fetch File Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch File Content": {
      "main": [
        [
          {
            "node": "Prepare Individual File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Individual File": {
      "main": [
        [
          {
            "node": "Prepare Individual File Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Individual File Prompt": {
      "main": [
        [
          {
            "node": "AI - Individual File Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI - Individual File Analysis": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Batches": {
      "main": [
        [
          {
            "node": "Prepare Batch Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Batch Prompt": {
      "main": [
        [
          {
            "node": "AI - Batch Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI - Batch Analysis": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge All Results": {
      "main": [
        [
          {
            "node": "Format Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Output": {
      "main": [
        [
          {
            "node": "Export to JSON File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS Bedrock - Batch": {
      "ai_languageModel": [
        [
          {
            "node": "AI - Batch Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AWS Bedrock - Individual": {
      "ai_languageModel": [
        [
          {
            "node": "AI - Individual File Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0b00aec4-0ef9-43d4-bf6d-311529cd9429",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e19bcd79288ba32d5b00c6bcd097856e2fdca4230440ae71d65e560d4587140f"
  },
  "id": "5ThSjB47VE5gPvC3",
  "tags": []
}
